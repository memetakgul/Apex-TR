    ////Encapsulation

// onceden anlatilan konu  getter setter konusu

public class Encapsulation {
    
    private integer sayi= 5 ;
    public integer getSayi(){
        return sayi;
    }   
     public VOID setSayi(integer userNum){
        sayi= userNum;
    }  
    
}

//Anonymous
Encapsulation ornek = new Encapsulation();
  //system.debug(ornek.sayi);
system.debug(ornek.getSayi());
ornek.setSayi(99);
system.debug(ornek.getSayi()); // 99



    ////Inheritance
public  VIRTUAL    class Hayvan {
    // VIRTUAL demek parent olabilirim 
  
    public VOID solunum(){
        system.debug('Hayvanlar solunum yapar');
    } 
     public VOID yemek(){
        system.debug('Hayvanlar yemek yer');
    } 
    
}
public class Kedi    EXTENDS  Hayvan {
// EXTENDS  parent olarak hayvan sectim demek  
  
    
    public VOID miyav(){
        system.debug('Kediler miyavlar');
    }   
    
}
public class Kopek  EXTENDS  Hayvan  {
  // EXTENDS  parent olarak hayvan sectim demek    
      public VOID havlar(){
        system.debug('Kopekler havlar');
    } 
}


//Anonymous
kopek comar = new Kopek();
comar.solunum();
comar.yemek();
comar.havlar();

kedi tekir = new Kedi();
tekir.solunum();
tekir.yemek();
tekir.miyav();

Hayvan hyn = new Hayvan();
hyn.solunum();
hyn.yemek();

kedi tekir = new Kedi();
tekir.solunum(); // Hayvanlar solunum yapar
tekir.yemek();   // |Hayvanlar yemek yer
tekir.miyav();

kopek comar = new Kopek();
comar.solunum();
comar.yemek();
comar.havlar();


public  VIRTUAL    class Hayvan {
    // VIRTUAL demek parent olabilirim 
  
    public VOID solunum(){
        system.debug('Hayvanlar solunum yapar');
    } 
     public VOID yemek(){
        system.debug('Hayvanlar yemek yer');
    } 
   
    
//  matematik ile alakali Overloading    
    
    public  integer  toplama (integer sayi1 , integer sayi2){
     //VIRTUAL child class bu methodu degisteirbilir izni 
     // child override yapabilir izni  
       return sayi1+sayi2; 
        
    }
    
    public  integer  toplama (integer sayi1 , integer sayi2 , integer sayi3){
        
       return sayi1+sayi2 +sayi3; 
        
    }
    
      public  decimal  toplama (decimal sayi1 , integer sayi2){
        
       return sayi1+sayi2; 
        
    }
    
  
// Overriding   
    
    public VIRTUAL void hareket ( ){
        
        system.debug('Hayvanlar kareket eder');
    }  
    
    
}
public class Kopek  EXTENDS  Hayvan  {
// EXTENDS  parent olarak hayvan sectim demek    
      public VOID havlar(){
        system.debug('Kopekler havlar');
    } 
    
    
    OVERRIDE
        // parentta toplama methodu var ama ben BODY kismini degistiriyorum 
      public void hareket ( ){
        
        system.debug('KOPEKLER kosarak hareket eder');
    } 
    
    
    
}

//Polymorphism

    // Overloading

/*
******  INHERITANCE   CLASSLAR  ****
****  BURADA INHERITANCE VE POLYMORFIZM ( overload ve override ) da ANLATILDI *****
Overloading  ==>>  AYNI CLASS DA
AYNI METHOD ISMI ILE 
FARKLI RETURN TYPE veya 
FARKLI PARAMETRELI
Method yazilabilmesi
*/
Hayvan hyn = new Hayvan();
system.debug(hyn.toplama(2,3));
system.debug(hyn.toplama(2,3 , 5));
system.debug(hyn.toplama(2.4,3));
kopek comar = new Kopek();
system.debug(comar.toplama(5,6));
system.debug(comar.toplama(5,6 ,7));
system.debug(comar.toplama(5.5,6));

/* Overriding ===>>
Parent class da olan bir methodu
CHILD CLASS DA
AYNI ISIMLI
Body kismi farkli
Method yazilabilmesi
** Private methodlar  VE  Statik methodlar override edilemez
*/
Hayvan hyn = new Hayvan();
hyn.hareket(); // Hayvanlar kareket eder
kopek comar = new Kopek();
comar.hareket(); // KOPEKLER kosarak hareket eder


    ///ABSTRACT--INTERFACE///


public ABSTRACT class Ogretmen {
    
    public Void gulumsemek(){
        
        system.debug('Ogretmenler tebessum etsinler');
        
    }
    
    public VOID ciddi(){
        system.debug('Ogretmenler ciddi olmalidir ');
    }
    
  
    ABSTRACT VOID yillikPlan();
    ABSTRACT VOID derseZamanindaGelmek();
    
    
    
}
public INTERFACE SekizinciSinifMat {
    void turev();
    
}
public INTERFACE YedinciSinifMat {
//  gizli olarak abstracttir
//  icindeki methodlarda gizli olarak abstractir
//  access modifierlari ( public , private)   PUBLICtir 
    
    VOID usluSayilar();
    VOID kokluSayilar();
    
 /*   
 Interface icindeki Methodlar PUBLIC tir ( access modifier yazilmaz )
Interface ABSTACT tir , Instance (ornek) olusturulamaz.
Interface icindeki Methodlar da ABSTRACT tir. 
Abstract classlara semi-abstract; interfaceler fully-abstract denilir 
Interfaceleri parent yapmak icin IMPELEMENTS kullanilir
Interface icindeki tum methodlar override edilmek zorundadir ancak method basina override yazilmaz.
Methodlar public olmak zorundadir
  
*/

}
public class AbstractAyseHanim  EXTENDS Ogretmen  IMPLEMENTS YedinciSinifMat {
    public VOID sertHoca(){
        system.debug('ogretmenler sert olmalidir');
    }
    
        
        public VOID yillikPlan(){
            system.debug(' ben yillik plan hazirlayacgim');
        }
    
        public Void derseZamanindaGelmek(){
            system.debug(' derslere zamaninda gelecegim');
        }
    
   // YedinciSinifMat INTERFACE icin yazilan methodlar
    
    public VOID  usluSayilar(){
        system.debug('USLU SAYILARI GUZEL ornekle anlatacgim');
    }
    public VOID  kokluSayilar(){
        system.debug('koklu saylar pek onmeli degil');
    } 
}

public class AbstractFatmaHanim  EXTENDS Ogretmen  IMPLEMENTS  YedinciSinifMat , SekizinciSinifMat        {
    
    public VOID yillikPlan(){
        
        system.debug('Yillik planlari yaz tattilinde hazirlarim ');
    }
    
    VOID derseZamanindaGelmek() {
       // system.debug(' DERDSE her zaman 10 dak gec gelirim');
    }
    
    // yedinciSinif interface mecburuz
   PUBLIC  VOID usluSayilar() {
       // system.debug('Yorgunum  az soru cozecegim');
        
    }
    
    PUBLIC  VOID kokluSayilar(){
        
        system.debug('ogrenciler anlamadi  daha fazla soru coz');  
    }
 
    // sekizinci sinif interface yzunden mecburuz
    PUBLIC   void turev(){
        system.debug('Bu konu zor   en son anlat');  
    }
}


